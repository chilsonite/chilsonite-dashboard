/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * cicada
 * OpenAPI spec version: 0.1.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import { fetchEnvMutator } from "../mutator";
import type {
  AgentInfo,
  CommandRequestParams,
  ErrorResponse,
  ListAgentsParams,
} from "./";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type listAgentsResponse200 = {
  data: AgentInfo[];
  status: 200;
};

export type listAgentsResponseComposite = listAgentsResponse200;

export type listAgentsResponse = listAgentsResponseComposite & {
  headers: Headers;
};

export const getListAgentsUrl = (params?: ListAgentsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/agents?${stringifiedParams}`
    : `/api/agents`;
};

export const listAgents = async (
  params?: ListAgentsParams,
  options?: RequestInit
): Promise<listAgentsResponse> => {
  return fetchEnvMutator<listAgentsResponse>(getListAgentsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getListAgentsQueryKey = (params?: ListAgentsParams) => {
  return [`/api/agents`, ...(params ? [params] : [])] as const;
};

export const getListAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof listAgents>>,
  TError = unknown,
>(
  params?: ListAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listAgents>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListAgentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listAgents>>> = ({
    signal,
  }) => listAgents(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAgents>>
>;
export type ListAgentsQueryError = unknown;

export function useListAgents<
  TData = Awaited<ReturnType<typeof listAgents>>,
  TError = unknown,
>(
  params: undefined | ListAgentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listAgents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAgents>>,
          TError,
          Awaited<ReturnType<typeof listAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAgents<
  TData = Awaited<ReturnType<typeof listAgents>>,
  TError = unknown,
>(
  params?: ListAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listAgents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAgents>>,
          TError,
          Awaited<ReturnType<typeof listAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAgents<
  TData = Awaited<ReturnType<typeof listAgents>>,
  TError = unknown,
>(
  params?: ListAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listAgents>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListAgents<
  TData = Awaited<ReturnType<typeof listAgents>>,
  TError = unknown,
>(
  params?: ListAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listAgents>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListAgentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type executeCommandResponse200 = {
  data: unknown;
  status: 200;
};

export type executeCommandResponse401 = {
  data: ErrorResponse;
  status: 401;
};

export type executeCommandResponseComposite =
  | executeCommandResponse200
  | executeCommandResponse401;

export type executeCommandResponse = executeCommandResponseComposite & {
  headers: Headers;
};

export const getExecuteCommandUrl = () => {
  return `/api/command`;
};

export const executeCommand = async (
  commandRequestParams: CommandRequestParams,
  options?: RequestInit
): Promise<executeCommandResponse> => {
  return fetchEnvMutator<executeCommandResponse>(getExecuteCommandUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(commandRequestParams),
  });
};

export const getExecuteCommandMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof executeCommand>>,
    TError,
    { data: CommandRequestParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchEnvMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof executeCommand>>,
  TError,
  { data: CommandRequestParams },
  TContext
> => {
  const mutationKey = ["executeCommand"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof executeCommand>>,
    { data: CommandRequestParams }
  > = (props) => {
    const { data } = props ?? {};

    return executeCommand(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecuteCommandMutationResult = NonNullable<
  Awaited<ReturnType<typeof executeCommand>>
>;
export type ExecuteCommandMutationBody = CommandRequestParams;
export type ExecuteCommandMutationError = ErrorResponse;

export const useExecuteCommand = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof executeCommand>>,
      TError,
      { data: CommandRequestParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof executeCommand>>,
  TError,
  { data: CommandRequestParams },
  TContext
> => {
  const mutationOptions = getExecuteCommandMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
