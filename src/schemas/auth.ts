/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * cicada
 * OpenAPI spec version: 0.1.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import { fetchEnvMutator } from "../mutator";
import type {
  CurrentUserResponse,
  ErrorResponse,
  LoginRequest,
  LoginResponse,
  RegisterRequest,
  RegisterResponse,
  TokenResponse,
} from "./";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type loginResponse200 = {
  data: LoginResponse;
  status: 200;
};

export type loginResponse401 = {
  data: ErrorResponse;
  status: 401;
};

export type loginResponseComposite = loginResponse200 | loginResponse401;

export type loginResponse = loginResponseComposite & {
  headers: Headers;
};

export const getLoginUrl = () => {
  return `/api/login`;
};

export const login = async (
  loginRequest: LoginRequest,
  options?: RequestInit
): Promise<loginResponse> => {
  return fetchEnvMutator<loginResponse>(getLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginRequest),
  });
};

export const getLoginMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchEnvMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["login"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return login(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginRequest;
export type LoginMutationError = ErrorResponse;

export const useLogin = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export type getCurrentUserResponse200 = {
  data: CurrentUserResponse;
  status: 200;
};

export type getCurrentUserResponse401 = {
  data: ErrorResponse;
  status: 401;
};

export type getCurrentUserResponseComposite =
  | getCurrentUserResponse200
  | getCurrentUserResponse401;

export type getCurrentUserResponse = getCurrentUserResponseComposite & {
  headers: Headers;
};

export const getGetCurrentUserUrl = () => {
  return `/api/me`;
};

export const getCurrentUser = async (
  options?: RequestInit
): Promise<getCurrentUserResponse> => {
  return fetchEnvMutator<getCurrentUserResponse>(getGetCurrentUserUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetCurrentUserQueryKey = () => {
  return [`/api/me`] as const;
};

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
  >;
  request?: SecondParameter<typeof fetchEnvMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({
    signal,
  }) => getCurrentUser({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUser>>
>;
export type GetCurrentUserQueryError = ErrorResponse;

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type listTokensResponse200 = {
  data: TokenResponse[];
  status: 200;
};

export type listTokensResponse401 = {
  data: ErrorResponse;
  status: 401;
};

export type listTokensResponseComposite =
  | listTokensResponse200
  | listTokensResponse401;

export type listTokensResponse = listTokensResponseComposite & {
  headers: Headers;
};

export const getListTokensUrl = () => {
  return `/api/me/tokens`;
};

export const listTokens = async (
  options?: RequestInit
): Promise<listTokensResponse> => {
  return fetchEnvMutator<listTokensResponse>(getListTokensUrl(), {
    ...options,
    method: "GET",
  });
};

export const getListTokensQueryKey = () => {
  return [`/api/me/tokens`] as const;
};

export const getListTokensQueryOptions = <
  TData = Awaited<ReturnType<typeof listTokens>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTokens>>, TError, TData>
  >;
  request?: SecondParameter<typeof fetchEnvMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTokensQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTokens>>> = ({
    signal,
  }) => listTokens({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListTokensQueryResult = NonNullable<
  Awaited<ReturnType<typeof listTokens>>
>;
export type ListTokensQueryError = ErrorResponse;

export function useListTokens<
  TData = Awaited<ReturnType<typeof listTokens>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTokens>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTokens>>,
          TError,
          Awaited<ReturnType<typeof listTokens>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTokens<
  TData = Awaited<ReturnType<typeof listTokens>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTokens>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTokens>>,
          TError,
          Awaited<ReturnType<typeof listTokens>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTokens<
  TData = Awaited<ReturnType<typeof listTokens>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTokens>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListTokens<
  TData = Awaited<ReturnType<typeof listTokens>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTokens>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListTokensQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type registerResponse201 = {
  data: RegisterResponse;
  status: 201;
};

export type registerResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type registerResponseComposite =
  | registerResponse201
  | registerResponse500;

export type registerResponse = registerResponseComposite & {
  headers: Headers;
};

export const getRegisterUrl = () => {
  return `/api/register`;
};

export const register = async (
  registerRequest: RegisterRequest,
  options?: RequestInit
): Promise<registerResponse> => {
  return fetchEnvMutator<registerResponse>(getRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(registerRequest),
  });
};

export const getRegisterMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchEnvMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["register"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return register(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof register>>
>;
export type RegisterMutationBody = RegisterRequest;
export type RegisterMutationError = ErrorResponse;

export const useRegister = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export type generateTokenResponse201 = {
  data: TokenResponse;
  status: 201;
};

export type generateTokenResponse401 = {
  data: ErrorResponse;
  status: 401;
};

export type generateTokenResponseComposite =
  | generateTokenResponse201
  | generateTokenResponse401;

export type generateTokenResponse = generateTokenResponseComposite & {
  headers: Headers;
};

export const getGenerateTokenUrl = () => {
  return `/api/token`;
};

export const generateToken = async (
  options?: RequestInit
): Promise<generateTokenResponse> => {
  return fetchEnvMutator<generateTokenResponse>(getGenerateTokenUrl(), {
    ...options,
    method: "POST",
  });
};

export const getGenerateTokenMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof fetchEnvMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["generateToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateToken>>,
    void
  > = () => {
    return generateToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateToken>>
>;

export type GenerateTokenMutationError = ErrorResponse;

export const useGenerateToken = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateToken>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof fetchEnvMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof generateToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getGenerateTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
